class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val            # Valor del nodo
        self.left = left          # Hijo izquierdo
        self.right = right        # Hijo derecho

def kth_smallest(root, k):
    """Find kth smallest element in BST using in-order traversal"""
    stack = []                   # Pila para recorrer el √°rbol en inorden de forma iterativa
    current = root               # Comenzamos desde la ra√≠z
    count = 0                    # Contador para saber cu√°ntos nodos hemos visitado
    
    while current or stack:      # Continuamos mientras haya nodos por visitar
        while current:           # Bajamos al nodo m√°s a la izquierda
            stack.append(current)
            current = current.left

        current = stack.pop()    # Procesamos el nodo actual
        count += 1               # Incrementamos el contador
        
        if count == k:           # Si ya llegamos al k-√©simo nodo, lo retornamos
            return current.val
        
        current = current.right  # Vamos al sub√°rbol derecho

def build_bst(values):
    # Funci√≥n auxiliar para construir un BST a partir de una lista de valores
    if not values:
        return None

    def insert(root, val):
        if not root:
            return TreeNode(val)         # Si no hay ra√≠z, creamos un nuevo nodo
        elif val < root.val:
            root.left = insert(root.left, val)  # Insertamos en el sub√°rbol izquierdo
        else:
            root.right = insert(root.right, val)  # Insertamos en el sub√°rbol derecho
        return root

    root = None
    for val in values:
        root = insert(root, val)         # Insertamos cada valor en el √°rbol
    return root

# ‚úÖ Casos de prueba

# Caso 1: Segundo elemento m√°s peque√±o
# BST: [3, 1, 4, 2] -> inorden: [1, 2, 3, 4]
print(kth_smallest(build_bst([3, 1, 4, 2]), 2) == 2)  # üéØ Segundo menor

# Caso 2: M√≠nimo (primer elemento)
# BST: [5, 3, 7, 2, 4, 6, 8] -> inorden: [2, 3, 4, 5, 6, 7, 8]
print(kth_smallest(build_bst([5, 3, 7, 2, 4, 6, 8]), 1) == 2)  # üìä Valor m√≠nimo

# Caso 3: M√°ximo (√∫ltimo elemento)
print(kth_smallest(build_bst([5, 3, 7, 2, 4, 6, 8]), 7) == 8)  # üìà Valor m√°ximo

# Caso 4: Elemento medio
# BST: [4, 2, 6, 1, 3, 5, 7] -> inorden: [1, 2, 3, 4, 5, 6, 7]
print(kth_smallest(build_bst([4, 2, 6, 1, 3, 5, 7]), 4) == 4)  # üîó Elemento central

# Caso 5: √Årbol con un solo nodo
print(kth_smallest(build_bst([10]), 1) == 10)  # üå± √Årbol de un solo nodo

