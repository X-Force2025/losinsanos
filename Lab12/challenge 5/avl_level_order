
from collections import deque

class AVLNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class AVLTree:
    def insert(self, root, key):
        if not root:
            return AVLNode(key)
        elif key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)
        return root  # No balancing logic

    def get_height(self, node):
        if not node:
            return 0
        return max(self.get_height(node.left), self.get_height(node.right)) + 1

    def print_level_order(self, root):
        """ðŸ“¡ Level-order print with heights"""
        if not root:
            return

        q = deque([root])
        while q:
            level_size = len(q)
            level_nodes = []
            for _ in range(level_size):
                node = q.popleft()
                height = self.get_height(node)
                level_nodes.append(f"{node.key}(h{height})")
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            print(", ".join(level_nodes))

from avl_level_order import AVLTree

def test_level_order_heights():
    avl = AVLTree()
    root = None
    for val in [10, 5, 15, 2, 7]:
        root = avl.insert(root, val)

    print("ðŸ§ª Test 1â€“5: Expected output:")
    # 10(h3)
    # 5(h2), 15(h1)
    # 2(h1), 7(h1)
    avl.print_level_order(root)

test_level_order_heights()

